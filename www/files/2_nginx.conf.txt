events {}

http {
   include mime.types;

   ############################################################
   # FIRST: Redirect All HTTP Traffic Over HTTPS
   ############################################################
   server {
    listen 80;
    server_name <BASE_FQDN> <www.FQDN> <SERVER_IP>;
    return 301 https://$host$request_uri;
   }

   server {
   ############################################################
   # HTTPS Server
   ############################################################
    listen 443 ssl; # Listen on port 443, use ssl module
    ssl_certificate <PATH_TO_KEY>/public_key.pem; # Self Signed or LetsEncrypt/CertBot
    ssl_certificate_key <PATH_TO_KEY>/private_key.pem; # Self Signed or LetsEncrypt/CertBot

    ############################################################
    # Disable the SSL Protocol And Use TLS Instead
    ############################################################
    ssl_protocols TLSv1.3 TLSv1.2;

    ############################################################
    # Optimize Cipher Suites
    ############################################################
    ssl_prefer_server_ciphers on;
    ssl_ciphers EECDH+AESGCM:EECDH+AES256:!MD5:!ADH:!AECDH;

    ############################################################
    # Enable Diffie-Helman Params To Exchange Server/Client Keys
    ############################################################
    ssl_dhparam <PATH_TO_FILE>/dhparam.pem;
    # Command to create the file: openssl dhparam <KEY_SIZE> -out <PATH_TO_FILE>/dhparam.pem

    ############################################################
    # Enable HSTS Strict Transport Security
    ############################################################
    add_header Strict-Transport-Security "max-age=31536000" always; # max-age=1year

    ############################################################
    # Set SSL Session Cache
    ############################################################
    ssl_session_cache shared:<CACHE_NAME>:<CACHE_SIZE>; # Kept in memory and can be accessed by any worker process
    ssl_session_timeout 4h;
    ssl_session_tickets on; # Provides the browser with a ticket which validates the ssl session. Ticket is issued by
    # the server which allows reading to bypass the session cache. We cannot disable the memory cache though as we can
    # cannot be sure the client holds a ticket. But this does optimize server resources by reducing ssl session lookups.

    ############################################################
    # Rate Limiting
    ############################################################
    limit_req_zone $request_uri zone=<ZONE_NAME>:<ZONE_SIZE> rate=60r/m;
    # Sets Limiting on URIs 60 reqs per minute

    location / {
        limit_req zone=<ZONE_NAME> burst=5 nodelay; # Setting a burst equates to 1r/s + xBurst = 1+x burst connections
        # nodelay serve allowed burst requests as quickly as possible but maintain the same time constraint
        try_files $uri $uri/ =404;
    }

    ############################################################
    # Basic Auth
    ############################################################
    location /secureArea {
      auth_basic "Secure Area Title";
      auth_basic_user_file /etc/nginx/.htpasswd;
      try_files $uri $uri/ =404;
    }

    ############################################################
    # Hardening
    ############################################################
    # Always Keep NGINX Software up-to-date.
    # Compare current version of nginx to changelogs for future security fixes.
    # Dont provide unnecessary information. Consider: server_tokens off; directive.
    # Disable Click-jacking. Consider: add_header X-Frame-Options "SAMEORIGIN";
    # Disable XSS Loads. Consider: add_header X-XSS-Protection "1; mode=block";
    # Remove any unused or dangerous NGINX modules. Consider: --without-http_autoindex_module for removal.

    }
}